package seep;

option java_package = "seep.comm.tuples.lrbenchmark";

message DataTuple {
	required int32 type = 1;
	required int64 time = 2;
	required int32 vid = 3;
	required int32 speed = 4;
	required int32 xway = 5;
	required int32 lane = 6;
	required int32 dir = 7;
	required int32 seg = 8;
	required int32 pos = 9;
	required int32 qid = 10;
	required int32 sInit = 11;
	required int32 sEnd = 12;
	required int32 dow = 13;
	required int32 tow = 14;
	required int32 day = 15;
}

message ControlTuple {
  enum Type { ACK = 1; BACKUP_STATE = 2; RECONFIGURE = 3; PARTITION = 4; 
  				SEND_INIT = 5; INIT_STATE =6; INIT_OK =7;
  			}

  // Identifies which field is filled in.
  required Type type = 1;

  // One of the following will be filled in.
  optional Ack ack = 2;
  optional BackupState backupState = 3;
  optional ReconfigureConnection reconfigureConnection = 4;
  optional Partition partition = 5;
  optional SendInit sendInit = 6;
  optional InitState initState = 7;
  optional InitOK initOK = 8; 
}

message Ack {
	required int32 opId = 1;
	required int64 ts = 2;
}

message SendInit {
	repeated int32 opId = 1 [packed=true];
}

message InitState {
	required int64 ts = 1;
	//TODO
}

message BackupState {
// Necessary to add the opID to identify the right buffer in the previous operator
	required int32 opId = 1;
	optional int64 ts_s = 2;
	required int64 ts_e = 3;
	//TODO
}

message ReconfigureConnection {
	optional int32 opId = 1;
	required string command = 2;
	optional string ip = 3;
	optional int32 node_port = 4;
	optional int32 inC = 5;
	optional int32 inD = 6;
}

message Partition {
	required int32 oldOpID = 1;
	required int32 newOpID = 2;
}

message InitOK {
	required int32 opId = 1;
}

message Statistics{
	required int32 opId = 1;
	optional double cpuU = 2;
	optional int32 time = 3;
	optional double th = 4;
}