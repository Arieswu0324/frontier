#
# CORE
# Copyright (c)2010-2012 the Boeing Company.
# See the LICENSE file included in this distribution.
#
''' Sample user-defined service.
'''

import os

from core.service import CoreService, addservice
from core.misc.ipaddr import IPv4Prefix, IPv6Prefix

class MeanderWorker2(CoreService):
    ''' This is a sample user-defined service. 
    '''
    # a unique name is required, without spaces
    _name = "MeanderWorker2"
    # you can create your own group here
    _group = "SEEP"
    # list of other services this service depends on
    _depends = ()
    # per-node directories
    _dirs = ()
    # generated files (without a full path this file goes in the node's dir,
    #  e.g. /tmp/pycore.12345/n1.conf/)
    _configs = ('worker2.sh',)
    # this controls the starting order vs other enabled services
    _startindex = 52 
    #_starttime="10"
    # list of startup commands, also may be generated during startup
    _startup = ('sh worker2.sh',)
    # list of shutdown commands
    _shutdown = ()


    @classmethod
    def generateconfig(cls, node, filename, services):
        ''' Return a string that will be written to filename, or sent to the
            GUI for user customization.
        '''

            
        if filename is 'shutdown.sh':
            cfg = "#!/bin/sh\n"
            cfg += "# auto-generated by MeanderWorker2 (worker2.py)\n"
            cfg = "touch worker2.shutdown\n"
            return cfg
        else:
            #repo_dir = "/data/dev/seep-github"
            repo_dir = "%s/../../../../../.."%os.path.dirname(os.path.realpath(__file__))
            seep_example_dir = "%s/seep-system/examples/acita_demo_2015"%repo_dir
            #seep_jar = "seep-system-0.0.1-SNAPSHOT.jar"
            #lib_dir = "lib"
            log_dir = "log2"

            cfg = "#!/bin/sh\n"
            cfg += "# auto-generated by MeanderWorker2 (worker2.py)\n"
            #cfg += "mkdir %s\n"%lib_dir
            cfg += "mkdir %s\n"%log_dir
            cfg += "pwd\n"
            cfg += "ls\n"
            cfg += "'echo parent directory:'\n"
            cfg += "ls ..\n"
            cfg += "cp %s/core-emane/vldb/config/run-worker.py .\n"%(seep_example_dir)
            if filter(lambda service: service._name == "OLSRETX", services):
                cfg += "cp %s/core-emane/vldb/config/olsrd-net-rates.sh net-rates2.sh\n"%(seep_example_dir)
                cfg += "cp %s/core-emane/vldb/config/olsrd-net-topology.sh net-topology2.sh\n"%(seep_example_dir)
            else:
                cfg += "cp %s/core-emane/vldb/config/net-rates.sh net-rates2.sh\n"%(seep_example_dir)
                cfg += "cp %s/core-emane/vldb/config/net-topology.sh net-topology2.sh\n"%(seep_example_dir)
            #cfg += "cp %s/lib/%s %s\n"%(seep_example_dir, seep_jar, lib_dir)
            cfg += 'echo "Starting MeanderWorker2 on `hostname`(`hostname -i`)"\n'
            cfg += 'echo "cating /etc/hosts"\n'
            cfg += 'cat /etc/hosts\n'
            cfg += "ip route > rt.log\n"
            cfg += "ifconfig > if.log\n"
            cfg += "/sbin/route > rts.log\n"
            cfg += "./net-rates2.sh\n"
            cfg += "./run-worker.py --id 2\n"
            cfg += "/sbin/route > rts-end.log\n"
            cfg += "touch worker2.shutdown\n"
            #cfg += "java -jar %s/%s Worker\n"%(lib_dir, seep_jar)

            return cfg

# this line is required to add the above class to the list of available services
addservice(MeanderWorker2)

