#
# CORE
# Copyright (c)2010-2012 the Boeing Company.
# See the LICENSE file included in this distribution.
#
''' Sample user-defined service.
'''

import os
import networkx as nx

from core.service import CoreService, addservice
from core.misc.ipaddr import IPv4Prefix, IPv6Prefix

class FixedRoutes(CoreService):
    ''' Fixed routes for static ad-hoc networks.
    '''
    # a unique name is required, without spaces
    _name = "FixedRoutes"
    # you can create your own group here
    _group = "SEEP"
    # list of other services this service depends on
    _depends = ()
    # per-node directories
    _dirs = ()
    # generated files (without a full path this file goes in the node's dir,
    #  e.g. /tmp/pycore.12345/n1.conf/)
    _configs = ('fixed_routes.sh', )
    # this controls the starting order vs other enabled services
    _startindex = 45
    # list of startup commands, also may be generated during startup
    _startup = ('sh fixed_routes.sh',)
    # list of shutdown commands
    _shutdown = ()
    _validate = ()


    """
    @classmethod
    def getstartup(cls,  node,  services):
        ''' Generate the appropriate command-line based on node interfaces.
        '''
        cmd = cls._startup[0]
        # are multiple interfaces supported? No.
        netifs = list(node.netifs())
        if len(netifs) > 0:
            ifc = netifs[0]
            cmd += " -i %s" % ifc.name
        cmd += " -l /var/log/nrlolsrd.log"
        cmd += " -rpipe %s_olsr" % node.name

        return (cmd, )
    """
    @classmethod
    def generateconfig(cls, node, filename, services):
        ''' Return a string that will be written to filename, or sent to the
            GUI for user customization.
        '''
        cfg = "#!/bin/sh\n"
        cfg += "# auto-generated by MyService (sample.py)\n"


        paths = cls.shortest_paths(node)
        #nhs = cls.next_hops(node, paths)

        #rt_table = ";".join(["%d,%d"%(dest,nhs[dest][1]) for dest in nhs if dest != node])
        rt_table = ";".join(["%d,%d"%(dest,paths[dest][1]) for dest in paths if dest != node.objid])
        cfg += "echo '%s' > fixed_routes.txt\n"%rt_table

        return cfg

    @classmethod
    def shortest_paths(cls, node):
        offset = 3
        x_dim = 5
        y_dim = 5
        nodes = x_dim * y_dim

        g = nx.Graph()
        g.add_nodes_from(range(offset, nodes+offset))

        for n in range(0, nodes):
            if n + 1 % x_dim > 0:
                g.add_edge(n+offset, n+offset+1)
            if n % x_dim > 0:
                g.add_edge(n+offset, n+offset-1)
            if n + x_dim < nodes:
                g.add_edge(n+offset, n+offset+x_dim)
            if n - x_dim >= 0:
                g.add_edge(n+offset, n+offset-x_dim)

        paths = nx.shortest_path(g, node.objid)

        #raise Exception("Computed paths: "+str(paths))
        return paths

# this line is required to add the above class to the list of available services
addservice(FixedRoutes)

